{"version":3,"sources":["menu/menu-trigger.ts"],"names":[],"mappings":"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","file":"menu/menu-trigger.js","sourcesContent":["import {\r\n    Directive,\r\n    ElementRef,\r\n    Input,\r\n    Output,\r\n    EventEmitter,\r\n    HostListener,\r\n    ViewContainerRef,\r\n    AfterViewInit,\r\n    OnDestroy,\r\n    Renderer\r\n} from '@angular/core';\r\nimport {MdMenu} from './menu-directive';\r\nimport {MdMenuMissingError} from './menu-errors';\r\nimport {\r\n    ENTER,\r\n    Overlay,\r\n    OverlayState,\r\n    OverlayRef,\r\n    TemplatePortal,\r\n    ConnectedPositionStrategy,\r\n    HorizontalConnectionPos,\r\n    VerticalConnectionPos\r\n} from '../core';\r\n\r\n/**\r\n * This directive is intended to be used in conjunction with an md-menu tag.  It is\r\n * responsible for toggling the display of the provided menu instance.\r\n */\r\n@Directive({\r\n  selector: '[md-menu-trigger-for]',\r\n  host: {\r\n    'aria-haspopup': 'true',\r\n    '(keydown)': '_handleKeydown($event)'\r\n  },\r\n  exportAs: 'mdMenuTrigger'\r\n})\r\nexport class MdMenuTrigger implements AfterViewInit, OnDestroy {\r\n  private _portal: TemplatePortal;\r\n  private _overlayRef: OverlayRef;\r\n  private _menuOpen: boolean = false;\r\n\r\n  // tracking input type is necessary so it's possible to only auto-focus\r\n  // the first item of the list when the menu is opened via the keyboard\r\n  private _openedFromKeyboard: boolean = false;\r\n\r\n  @Input('md-menu-trigger-for') menu: MdMenu;\r\n  @Output() onMenuOpen = new EventEmitter();\r\n  @Output() onMenuClose = new EventEmitter();\r\n\r\n  constructor(private _overlay: Overlay, private _element: ElementRef,\r\n              private _viewContainerRef: ViewContainerRef, private _renderer: Renderer) {}\r\n\r\n  ngAfterViewInit() {\r\n    this._checkMenu();\r\n    this.menu.close.subscribe(() => this.closeMenu());\r\n  }\r\n\r\n  ngOnDestroy() { this.destroyMenu(); }\r\n\r\n  get menuOpen(): boolean { return this._menuOpen; }\r\n\r\n  @HostListener('click')\r\n  toggleMenu(): void {\r\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\r\n  }\r\n\r\n  openMenu(): void {\r\n    this._createOverlay();\r\n    this._overlayRef.attach(this._portal);\r\n    this._initMenu();\r\n  }\r\n\r\n  closeMenu(): void {\r\n    if (this._overlayRef) {\r\n      this._overlayRef.detach();\r\n      this._resetMenu();\r\n    }\r\n  }\r\n\r\n  destroyMenu(): void {\r\n    if (this._overlayRef) {\r\n      this._overlayRef.dispose();\r\n      this._overlayRef = null;\r\n    }\r\n  }\r\n\r\n  focus() {\r\n    this._renderer.invokeElementMethod(this._element.nativeElement, 'focus');\r\n  }\r\n\r\n  /**\r\n   * This method sets the menu state to open and focuses the first item if\r\n   * the menu was opened via the keyboard.\r\n   */\r\n  private _initMenu(): void {\r\n    this._setIsMenuOpen(true);\r\n\r\n    if (this._openedFromKeyboard) {\r\n      this.menu._focusFirstItem();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * This method resets the menu when it's closed, most importantly restoring\r\n   * focus to the menu trigger if the menu was opened via the keyboard.\r\n   */\r\n  private _resetMenu(): void {\r\n    this._setIsMenuOpen(false);\r\n\r\n    if (this._openedFromKeyboard) {\r\n      this.focus();\r\n      this._openedFromKeyboard = false;\r\n    }\r\n  }\r\n\r\n  // set state rather than toggle to support triggers sharing a menu\r\n  private _setIsMenuOpen(isOpen: boolean): void {\r\n    this._menuOpen = isOpen;\r\n    this.menu._setClickCatcher(isOpen);\r\n    this._menuOpen ? this.onMenuOpen.emit(null) : this.onMenuClose.emit(null);\r\n  }\r\n\r\n  /**\r\n   *  This method checks that a valid instance of MdMenu has been passed into\r\n   *  md-menu-trigger-for.  If not, an exception is thrown.\r\n   */\r\n  private _checkMenu() {\r\n    if (!this.menu || !(this.menu instanceof MdMenu)) {\r\n      throw new MdMenuMissingError();\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  This method creates the overlay from the provided menu's template and saves its\r\n   *  OverlayRef so that it can be attached to the DOM when openMenu is called.\r\n   */\r\n  private _createOverlay(): void {\r\n    if (!this._overlayRef) {\r\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\r\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\r\n   * @returns OverlayState\r\n   */\r\n  private _getOverlayConfig(): OverlayState {\r\n    const overlayState = new OverlayState();\r\n    overlayState.positionStrategy = this._getPosition();\r\n    return overlayState;\r\n  }\r\n\r\n  /**\r\n   * This method builds the position strategy for the overlay, so the menu is properly connected\r\n   * to the trigger.\r\n   * @returns ConnectedPositionStrategy\r\n   */\r\n  private _getPosition(): ConnectedPositionStrategy  {\r\n    const positionX: HorizontalConnectionPos = this.menu.positionX === 'before' ? 'end' : 'start';\r\n    const positionY: VerticalConnectionPos = this.menu.positionY === 'above' ? 'bottom' : 'top';\r\n\r\n    return this._overlay.position().connectedTo(\r\n      this._element,\r\n      {originX: positionX, originY: positionY},\r\n      {overlayX: positionX, overlayY: positionY}\r\n    );\r\n  }\r\n\r\n  // TODO: internal\r\n  _handleKeydown(event: KeyboardEvent): void {\r\n    if (event.keyCode === ENTER) {\r\n      this._openedFromKeyboard = true;\r\n    }\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"/source/"}