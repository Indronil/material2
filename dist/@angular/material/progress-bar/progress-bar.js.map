{"version":3,"sources":["progress-bar/progress-bar.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EACH,QAAQ,EAER,SAAS,EACT,uBAAuB,EACvB,WAAW,EACX,KAAK,EACR,MAAM,eAAe;OACf,EAAC,YAAY,EAAC,MAAM,iBAAiB;AAE5C,yCAAyC;AACzC,kEAAkE;AAGlE;;GAEG;AAaH;IAAA;QACE,6EAA6E;QACrE,WAAM,GAAW,CAAC,CAAC;QAY3B,0DAA0D;QAClD,iBAAY,GAAW,CAAC,CAAC;QAWjC;;;;;;WAMG;QAGH,SAAI,GAAyD,aAAa,CAAC;IAkB7E,CAAC;IA/CC,sBAAI,gCAAK;aAAT;YACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACrB,CAAC;aAED,UAAU,CAAS;YACjB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QAC9B,CAAC;;;OAJA;IAUD,sBAAI,sCAAW;aAAf;YACE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;QAC3B,CAAC;aAED,UAAgB,CAAS;YACvB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QACpC,CAAC;;;OAJA;IAiBD,iFAAiF;IACjF,yCAAiB,GAAjB;QACE,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;QAC7B,MAAM,CAAC,EAAC,SAAS,EAAE,YAAU,KAAK,MAAG,EAAC,CAAC;IACzC,CAAC;IAED;;;OAGG;IACH,wCAAgB,GAAhB;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,QAAQ,CAAC,CAAC,CAAC;YAC1B,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC;YACnC,MAAM,CAAC,EAAC,SAAS,EAAE,YAAU,KAAK,MAAG,EAAC,CAAC;QACzC,CAAC;IACH,CAAC;IAhDD;QAAC,KAAK,EAAE;QACP,WAAW,CAAC,oBAAoB,CAAC;;8CAAA;IAYlC;QAAC,KAAK,EAAE;;oDAAA;IAgBR;QAAC,KAAK,EAAE;QACP,WAAW,CAAC,WAAW,CAAC;;+CAAA;IA9C3B;QAAC,SAAS,CAAC;YACT,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,iBAAiB;YAC3B,IAAI,EAAE;gBACJ,MAAM,EAAE,aAAa;gBACrB,eAAe,EAAE,GAAG;gBACpB,eAAe,EAAE,KAAK;aACvB;YACD,WAAW,EAAE,mBAAmB;YAChC,SAAS,EAAE,CAAC,kBAAkB,CAAC;YAC/B,eAAe,EAAE,uBAAuB,CAAC,MAAM;SAChD,CAAC;;qBAAA;IAsDF,oBAAC;AAAD,CArDA,AAqDC,IAAA;AAED,sEAAsE;AACtE,eAAe,CAAS,EAAE,GAAO,EAAE,GAAS;IAAlB,mBAAO,GAAP,OAAO;IAAE,mBAAS,GAAT,SAAS;IAC1C,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC;AAQD;IAAA;IAOA,CAAC;IANQ,2BAAO,GAAd;QACE,MAAM,CAAC;YACL,QAAQ,EAAE,mBAAmB;YAC7B,SAAS,EAAE,EAAE;SACd,CAAC;IACJ,CAAC;IAXH;QAAC,QAAQ,CAAC;YACR,OAAO,EAAE,CAAC,YAAY,CAAC;YACvB,OAAO,EAAE,CAAC,aAAa,CAAC;YACxB,YAAY,EAAE,CAAC,aAAa,CAAC;SAC9B,CAAC;;2BAAA;IAQF,0BAAC;AAAD,CAPA,AAOC,IAAA","file":"progress-bar/progress-bar.js","sourcesContent":["import {\r\n    NgModule,\r\n    ModuleWithProviders,\r\n    Component,\r\n    ChangeDetectionStrategy,\r\n    HostBinding,\r\n    Input,\r\n} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\n\r\n// TODO(josephperrott): Benchpress tests.\r\n// TODO(josephperrott): Add ARIA attributes for progressbar \"for\".\r\n\r\n\r\n/**\r\n * <md-progress-bar> component.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'md-progress-bar',\r\n  host: {\r\n    'role': 'progressbar',\r\n    'aria-valuemin': '0',\r\n    'aria-valuemax': '100',\r\n  },\r\n  templateUrl: 'progress-bar.html',\r\n  styleUrls: ['progress-bar.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MdProgressBar {\r\n  /** Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow. */\r\n  private _value: number = 0;\r\n\r\n  @Input()\r\n  @HostBinding('attr.aria-valuenow')\r\n  get value() {\r\n    return this._value;\r\n  }\r\n\r\n  set value(v: number) {\r\n    this._value = clamp(v || 0);\r\n  }\r\n\r\n  /** Buffer value of the progress bar. Defaults to zero. */\r\n  private _bufferValue: number = 0;\r\n\r\n  @Input()\r\n  get bufferValue() {\r\n    return this._bufferValue;\r\n  }\r\n\r\n  set bufferValue(v: number) {\r\n    this._bufferValue = clamp(v || 0);\r\n  }\r\n\r\n  /**\r\n   * Mode of the progress bar.\r\n   *\r\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\r\n   * 'determinate'.\r\n   * Mirrored to mode attribute.\r\n   */\r\n  @Input()\r\n  @HostBinding('attr.mode')\r\n  mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\r\n\r\n  /** Gets the current transform value for the progress bar's primary indicator. */\r\n  _primaryTransform() {\r\n    let scale = this.value / 100;\r\n    return {transform: `scaleX(${scale})`};\r\n  }\r\n\r\n  /**\r\n   * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\r\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\r\n   */\r\n  _bufferTransform() {\r\n    if (this.mode == 'buffer') {\r\n      let scale = this.bufferValue / 100;\r\n      return {transform: `scaleX(${scale})`};\r\n    }\r\n  }\r\n}\r\n\r\n/** Clamps a value to be between two numbers, by default 0 and 100. */\r\nfunction clamp(v: number, min = 0, max = 100) {\r\n  return Math.max(min, Math.min(max, v));\r\n}\r\n\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  exports: [MdProgressBar],\r\n  declarations: [MdProgressBar],\r\n})\r\nexport class MdProgressBarModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: MdProgressBarModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}