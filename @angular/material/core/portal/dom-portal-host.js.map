{"version":3,"sources":["core/portal/dom-portal-host.ts"],"names":[],"mappings":";;;;;OACO,EAAC,cAAc,EAAkC,MAAM,UAAU;OACjE,EAAC,gDAAgD,EAAC,MAAM,iBAAiB;AAGhF;;;;;GAKG;AACH;IAAmC,iCAAc;IAC/C,uBACY,eAAwB,EACxB,yBAAmD;QAC7D,iBAAO,CAAC;QAFE,oBAAe,GAAf,eAAe,CAAS;QACxB,8BAAyB,GAAzB,yBAAyB,CAA0B;IAE/D,CAAC;IAED,0FAA0F;IAC1F,6CAAqB,GAArB,UAAyB,MAA0B;QACjD,EAAE,CAAC,CAAC,MAAM,CAAC,gBAAgB,IAAI,IAAI,CAAC,CAAC,CAAC;YACpC,MAAM,IAAI,gDAAgD,EAAE,CAAC;QAC/D,CAAC;QAED,IAAI,gBAAgB,GAAG,IAAI,CAAC,yBAAyB,CAAC,uBAAuB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAChG,IAAI,GAAG,GAAG,MAAM,CAAC,gBAAgB,CAAC,eAAe,CAC7C,gBAAgB,EAChB,MAAM,CAAC,gBAAgB,CAAC,MAAM,EAC9B,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;QAE/D,IAAI,QAAQ,GAA0B,GAAG,CAAC,QAAQ,CAAC;QACnD,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;QACxD,IAAI,CAAC,YAAY,CAAC,cAAM,OAAA,GAAG,CAAC,OAAO,EAAE,EAAb,CAAa,CAAC,CAAC;QAEvC,MAAM,CAAC,GAAG,CAAC;IACb,CAAC;IAED,4CAAoB,GAApB,UAAqB,MAAsB;QAA3C,iBAeC;QAdC,IAAI,aAAa,GAAG,MAAM,CAAC,gBAAgB,CAAC;QAC5C,IAAI,OAAO,GAAG,aAAa,CAAC,kBAAkB,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QAEnE,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,eAAe,CAAC,WAAW,CAAC,QAAQ,CAAC,EAA1C,CAA0C,CAAC,CAAC;QAElF,IAAI,CAAC,YAAY,CAAC,CAAC;YACjB,IAAI,KAAK,GAAG,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAC3C,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBAChB,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC9B,CAAC;QACH,CAAC,CAAC,CAAC,CAAC;QAEJ,2CAA2C;QAC3C,MAAM,CAAC,IAAI,GAAG,EAAe,CAAC;IAChC,CAAC;IAED,+BAAO,GAAP;QACE,gBAAK,CAAC,OAAO,WAAE,CAAC;QAChB,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,IAAI,IAAI,CAAC,CAAC,CAAC;YAC5C,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACpE,CAAC;IACH,CAAC;IACH,oBAAC;AAAD,CAjDA,AAiDC,CAjDkC,cAAc,GAiDhD","file":"core/portal/dom-portal-host.js","sourcesContent":["import {ComponentFactoryResolver, ComponentRef, EmbeddedViewRef} from '@angular/core';\r\nimport {BasePortalHost, ComponentPortal, TemplatePortal} from './portal';\r\nimport {MdComponentPortalAttachedToDomWithoutOriginError} from './portal-errors';\r\n\r\n\r\n/**\r\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\r\n * application context.\r\n *\r\n * This is the only part of the portal core that directly touches the DOM.\r\n */\r\nexport class DomPortalHost extends BasePortalHost {\r\n  constructor(\r\n      private _hostDomElement: Element,\r\n      private _componentFactoryResolver: ComponentFactoryResolver) {\r\n    super();\r\n  }\r\n\r\n  /** Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver. */\r\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\r\n    if (portal.viewContainerRef == null) {\r\n      throw new MdComponentPortalAttachedToDomWithoutOriginError();\r\n    }\r\n\r\n    let componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\r\n    let ref = portal.viewContainerRef.createComponent(\r\n        componentFactory,\r\n        portal.viewContainerRef.length,\r\n        portal.injector || portal.viewContainerRef.parentInjector);\r\n\r\n    let hostView = <EmbeddedViewRef<any>> ref.hostView;\r\n    this._hostDomElement.appendChild(hostView.rootNodes[0]);\r\n    this.setDisposeFn(() => ref.destroy());\r\n\r\n    return ref;\r\n  }\r\n\r\n  attachTemplatePortal(portal: TemplatePortal): Map<string, any> {\r\n    let viewContainer = portal.viewContainerRef;\r\n    let viewRef = viewContainer.createEmbeddedView(portal.templateRef);\r\n\r\n    viewRef.rootNodes.forEach(rootNode => this._hostDomElement.appendChild(rootNode));\r\n\r\n    this.setDisposeFn((() => {\r\n      let index = viewContainer.indexOf(viewRef);\r\n      if (index != -1) {\r\n        viewContainer.remove(index);\r\n      }\r\n    }));\r\n\r\n    // TODO(jelbourn): Return locals from view.\r\n    return new Map<string, any>();\r\n  }\r\n\r\n  dispose(): void {\r\n    super.dispose();\r\n    if (this._hostDomElement.parentNode != null) {\r\n      this._hostDomElement.parentNode.removeChild(this._hostDomElement);\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}