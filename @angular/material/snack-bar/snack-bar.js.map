{"version":3,"sources":["snack-bar/snack-bar.ts"],"names":[],"mappings":"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","file":"snack-bar/snack-bar.js","sourcesContent":["import {\r\n  NgModule,\r\n  ModuleWithProviders,\r\n  Injectable,\r\n  ComponentRef,\r\n} from '@angular/core';\r\nimport {\r\n  ComponentType,\r\n  ComponentPortal,\r\n  Overlay,\r\n  OverlayModule,\r\n  OverlayRef,\r\n  OverlayState,\r\n  PortalModule,\r\n  OVERLAY_PROVIDERS,\r\n  MdLiveAnnouncer,\r\n} from '../core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MdSnackBarConfig} from './snack-bar-config';\r\nimport {MdSnackBarRef} from './snack-bar-ref';\r\nimport {MdSnackBarContainer} from './snack-bar-container';\r\nimport {SimpleSnackBar} from './simple-snack-bar';\r\n\r\nexport {MdSnackBarRef} from './snack-bar-ref';\r\nexport {MdSnackBarConfig} from './snack-bar-config';\r\n\r\n// TODO(josephperrott): Animate entrance and exit of snack bars.\r\n// TODO(josephperrott): Automate dismiss after timeout.\r\n\r\n\r\n/**\r\n * Service to dispatch Material Design snack bar messages.\r\n */\r\n@Injectable()\r\nexport class MdSnackBar {\r\n  /** A reference to the current snack bar in the view. */\r\n  private _snackBarRef: MdSnackBarRef<any>;\r\n\r\n  constructor(private _overlay: Overlay,\r\n              private _live: MdLiveAnnouncer) {}\r\n\r\n  /**\r\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\r\n   * currently opened snack bars.\r\n   */\r\n  openFromComponent<T>(component: ComponentType<T>,\r\n                       config: MdSnackBarConfig): MdSnackBarRef<T> {\r\n    if (this._snackBarRef) {\r\n      this._snackBarRef.dismiss();\r\n    }\r\n    let overlayRef = this._createOverlay();\r\n    let snackBarContainer = this._attachSnackBarContainer(overlayRef, config);\r\n    let mdSnackBarRef = this._attachSnackbarContent(component, snackBarContainer, overlayRef);\r\n    this._live.announce(config.announcementMessage, config.politeness);\r\n    return mdSnackBarRef;\r\n  }\r\n\r\n  /**\r\n   * Creates and dispatches a snack bar.\r\n   */\r\n  open(message: string, actionLabel: string,\r\n       config: MdSnackBarConfig): MdSnackBarRef<SimpleSnackBar> {\r\n    config.announcementMessage = message;\r\n    let simpleSnackBarRef = this.openFromComponent(SimpleSnackBar, config);\r\n    simpleSnackBarRef.instance.snackBarRef = simpleSnackBarRef;\r\n    simpleSnackBarRef.instance.message = message;\r\n    simpleSnackBarRef.instance.action = actionLabel;\r\n    return simpleSnackBarRef;\r\n  }\r\n\r\n  /**\r\n   * Attaches the snack bar container component to the overlay.\r\n   */\r\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\r\n                                   config: MdSnackBarConfig): MdSnackBarContainer {\r\n    let containerPortal = new ComponentPortal(MdSnackBarContainer, config.viewContainerRef);\r\n    let containerRef: ComponentRef<MdSnackBarContainer> = overlayRef.attach(containerPortal);\r\n    containerRef.instance.snackBarConfig = config;\r\n\r\n    return containerRef.instance;\r\n  }\r\n\r\n  /**\r\n   * Places a new component as the content of the snack bar container.\r\n   */\r\n  private _attachSnackbarContent<T>(component: ComponentType<T>,\r\n                                    container: MdSnackBarContainer,\r\n                                    overlayRef: OverlayRef): MdSnackBarRef<T> {\r\n    let portal = new ComponentPortal(component);\r\n    let contentRef = container.attachComponentPortal(portal);\r\n    let snackBarRef = <MdSnackBarRef<T>> new MdSnackBarRef(contentRef.instance, overlayRef);\r\n\r\n    this._snackBarRef = snackBarRef;\r\n    return snackBarRef;\r\n  }\r\n\r\n  /**\r\n   * Creates a new overlay and places it in the correct location.\r\n   */\r\n  private _createOverlay(): OverlayRef {\r\n    let state = new OverlayState();\r\n    state.positionStrategy = this._overlay.position().global()\r\n        .fixed()\r\n        .centerHorizontally()\r\n        .bottom('0');\r\n    return this._overlay.create(state);\r\n  }\r\n}\r\n\r\n\r\n@NgModule({\r\n  imports: [OverlayModule, PortalModule, CommonModule],\r\n  exports: [MdSnackBarContainer],\r\n  declarations: [MdSnackBarContainer, SimpleSnackBar],\r\n  entryComponents: [MdSnackBarContainer, SimpleSnackBar],\r\n})\r\nexport class MdSnackBarModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: MdSnackBarModule,\r\n      providers: [MdSnackBar, OVERLAY_PROVIDERS, MdLiveAnnouncer]\r\n    };\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}